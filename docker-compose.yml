
services:
  # ---------------- MongoDB ----------------
  mongo:
    image: mongo:6
    container_name: jani-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodata:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand('ping').ok", "mongodb://localhost:27017/test"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ---------------- Redis ----------------
  redis:
    image: redis:7
    container_name: jani-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data

  # ---------------- Auth Service ----------------
  auth:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    container_name: jani-auth
    env_file:
      - .env
    environment:
      MONGO_URI: mongodb://mongo:27017/jani-ai-auth
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      PORT: ${AUTH_PORT}
      # S3/MinIO configuration for media
      S3_ENDPOINT: http://minio:9000
      S3_REGION: us-east-1
      S3_BUCKET: ${S3_BUCKET:-jani-media}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-${MINIO_ROOT_USER:-minioadmin}}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-${MINIO_ROOT_PASSWORD:-minioadmin}}
      S3_FORCE_PATH_STYLE: ${S3_FORCE_PATH_STYLE:-true}
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${AUTH_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  seed-data:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    container_name: jani-seed-data
    command: ["sh", "-c", "node dist/scripts/seedUsers.js && node seed-all-data.js && node seed-traceability-events.js"]
    env_file:
      - .env
    environment:
      MONGO_URI: mongodb://mongo:27017/jani-ai-auth
      MONGODB_URI: mongodb://mongo:27017/jani-ai-auth
      TRACEABILITY_MONGODB_URI: mongodb://mongo:27017/jani-traceability
    depends_on:
      mongo:
        condition: service_healthy
      auth:
        condition: service_started
    restart: "no"

  # ---------------- AI Service ----------------
  ai:
    build:
      context: ./services/ai
      dockerfile: Dockerfile
    container_name: jani-ai
    env_file:
      - .env
    environment:
      PORT: ${AI_PORT}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - "${AI_PORT}:${AI_PORT}"
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${AI_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ---------------- User Service ----------------
  user:
    build:
      context: ./services/user
      dockerfile: Dockerfile
    container_name: jani-user
    env_file:
      - .env
    environment:
      PORT: ${USER_PORT}
      MONGO_URI: mongodb://mongo:27017/jani-ai-user
    ports:
      - "${USER_PORT}:${USER_PORT}"
    depends_on:
      mongo:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${USER_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ---------------- Traceability Service ----------------
  traceability:
    build:
      context: ./services/traceability
      dockerfile: Dockerfile
    container_name: jani-traceability
    env_file:
      - .env
    environment:
      PORT: ${TRACEABILITY_PORT:-4002}
      MONGO_URI: mongodb://mongo:27017/jani-traceability
      NODE_ENV: ${NODE_ENV:-development}
      JWT_SECRET: ${JWT_SECRET}
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8081,http://localhost:19006
    ports:
      - "${TRACEABILITY_PORT:-4002}:${TRACEABILITY_PORT:-4002}"
    depends_on:
      mongo:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${TRACEABILITY_PORT:-4002}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  operations:
    build:
      context: ./services/operations
      dockerfile: Dockerfile
    container_name: jani-operations
    env_file:
      - .env
    environment:
      PORT: ${OPERATIONS_PORT:-4003}
      MONGO_URI: mongodb://mongo:27017/jani-operations
      SERVICE_NAME: operations-service
    ports:
      - target: 4003
        published: 4003
        protocol: tcp
    depends_on:
      mongo:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ---------------- MinIO (S3-compatible) ----------------
  minio:
    image: minio/minio:RELEASE.2024-01-18T22-51-28Z
    container_name: jani-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # Console
    volumes:
      - miniodata:/data
    restart: unless-stopped

  # ---------------- Next.js Frontend ----------------
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: jani-web
    working_dir: /app
    env_file:
      - .env
    environment:
      NEXT_PUBLIC_AUTH_URL: ${NEXT_PUBLIC_AUTH_URL}
      AUTH_SERVICE_URL: http://auth:${AUTH_PORT}
      PORT: ${WEB_PORT}
    ports:
      - "${WEB_PORT}:${WEB_PORT}"
    depends_on:
      auth:
        condition: service_healthy
      seed-data:
        condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${WEB_PORT}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ---------------- Expo Mobile App ----------------
  mobile:
    build:
      context: ./apps/mobile
      dockerfile: Dockerfile
    container_name: jani-mobile
    working_dir: /app
    env_file:
      - .env
    environment:
      NODE_ENV: development
      EXPO_DEVTOOLS_LISTEN_ADDRESS: 0.0.0.0
      REACT_NATIVE_PACKAGER_HOSTNAME: ${MOBILE_HOST:-localhost}
      # Backend service URLs
      AUTH_SERVICE_URL: http://auth:${AUTH_PORT}
      TRACEABILITY_SERVICE_URL: http://traceability:${TRACEABILITY_PORT}
      # Ensure the mobile container uses the operations service API prefix
      # so client code that calls '/farms' will target '/api/farms' on the
      # operations service inside the compose network.
      OPERATIONS_BASE_URL: http://operations:${OPERATIONS_PORT:-4003}/api
    volumes:
      - ./apps/mobile:/app
      - /app/node_modules
    ports:
      - "8081:8081"   # Metro bundler
      - "19000:19000" # Expo DevTools
      - "19001:19001" # Expo DevTools (iOS)
      - "19002:19002" # Expo DevTools (Android)
    depends_on:
      auth:
        condition: service_healthy
      traceability:
        condition: service_healthy
      seed-data:
        condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/status"] 
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  mongodata:
  redisdata:
  miniodata:
